{"slideHeight":768,
"filename":"2 - Data Types",
"navigatorEvents":[{"eventName":"Slide 1",
"eventIndex":0}
,{"eventName":"Slide 2",
"eventIndex":1}
,{"eventName":"Slide 3",
"eventIndex":2}
,{"eventName":"Slide 4",
"eventIndex":3}
,{"eventName":"Slide 5",
"eventIndex":4}
,{"eventName":"Slide 6",
"eventIndex":5}
,{"eventName":"Slide 7",
"eventIndex":6}
,{"eventName":"Slide 8",
"eventIndex":7}
,{"eventName":"Slide 9",
"eventIndex":8}
,{"eventName":"Slide 10",
"eventIndex":9}
,{"eventName":"Slide 11",
"eventIndex":10}
,{"eventName":"Slide 12",
"eventIndex":11}
,{"eventName":"Slide 13",
"eventIndex":12}
,{"eventName":"Slide 14",
"eventIndex":13}
,{"eventName":"Slide 15",
"eventIndex":14}
,{"eventName":"Slide 16",
"eventIndex":15}
,{"eventName":"Slide 17",
"eventIndex":16}
]
,
"textures":{"s15.b":{"url":"images-1/s15.b.jpeg",
"width":1024,
"height":768}
,
"s6.a":{"url":"images-1/s5.b.jpeg",
"width":1024,
"height":768}
,
"s12.a":{"url":"images-1/s11.b.jpeg",
"width":1024,
"height":768}
,
"s2.b":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"thumbnail":{"url":"images-1/thumbnail.jpeg",
"width":458,
"height":344}
,
"s8.a":{"url":"images-1/s7.b.jpeg",
"width":1024,
"height":768}
,
"s4.b":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s14.b":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s17.a":{"url":"images-1/s16.b.jpeg",
"width":1024,
"height":768}
,
"s11.a":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s6.b":{"url":"images-1/s6.b.jpeg",
"width":1024,
"height":768}
,
"s1.a":{"url":"images-1/s1.a.jpeg",
"width":1024,
"height":768}
,
"s13.b":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s8.b":{"url":"images-1/s8.b.jpeg",
"width":1024,
"height":768}
,
"s10.a":{"url":"images-1/s9.b.jpeg",
"width":1024,
"height":768}
,
"s3.a":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"s16.a":{"url":"images-1/s15.b.jpeg",
"width":1024,
"height":768}
,
"s5.a":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s12.b":{"url":"images-1/s12.b.jpeg",
"width":1024,
"height":768}
,
"s1.b":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s15.a":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s7.a":{"url":"images-1/s6.b.jpeg",
"width":1024,
"height":768}
,
"s3.b":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s17.b":{"url":"images-1/s17.b.png",
"width":1024,
"height":768}
,
"s11.b":{"url":"images-1/s11.b.jpeg",
"width":1024,
"height":768}
,
"s9.a":{"url":"images-1/s8.b.jpeg",
"width":1024,
"height":768}
,
"s14.a":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s5.b":{"url":"images-1/s5.b.jpeg",
"width":1024,
"height":768}
,
"s7.b":{"url":"images-1/s7.b.jpeg",
"width":1024,
"height":768}
,
"s2.a":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s10.b":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s16.b":{"url":"images-1/s16.b.jpeg",
"width":1024,
"height":768}
,
"s13.a":{"url":"images-1/s12.b.jpeg",
"width":1024,
"height":768}
,
"s9.b":{"url":"images-1/s9.b.jpeg",
"width":1024,
"height":768}
,
"s4.a":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
}
,
"title":"2 - Data Types",
"minorVersion":4,
"timestamp":"2013-01-17 00:05:49",
"slideWidth":1024,
"eventTimelines":[{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s1.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s1.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s1.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s1.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":193,
"width":701,
"x":173,
"height":192}
,
"text":"Data Types, Vars & Arithmetic"}
,{"targetRectangle":{"y":400,
"width":164,
"x":430,
"height":38}
,
"text":"Ryan Nixon"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s2.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s2.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s2.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s2.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":330,
"x":347,
"height":96}
,
"text":"Variables"}
,{"targetRectangle":{"y":226,
"width":780,
"x":134,
"height":117}
,
"text":"Every program uses data, and this data needs to be stored somewhere"}
,{"targetRectangle":{"y":342,
"width":786,
"x":134,
"height":198}
,
"text":"Java uses variables to store information in 3 different locations, the class level, the method level and the instance level. We’ll see examples of the first two today"}
,{"targetRectangle":{"y":539,
"width":753,
"x":134,
"height":121}
,
"text":"Think of a variable as a named location in memory that contains data and can be retrieved for use at any time"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s3.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s3.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s3.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s3.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":330,
"x":347,
"height":96}
,
"text":"Variables"}
,{"targetRectangle":{"y":228,
"width":786,
"x":134,
"height":134}
,
"text":"All variables must be declared with a data type before they are used. Declaring tells Java how much memory to use when storing the information and what type of information it is"}
,{"targetRectangle":{"y":361,
"width":517,
"x":134,
"height":100}
,
"text":"The declaration generally looks like this:\u2028Type variable_1, variable_2 ...;"}
,{"targetRectangle":{"y":460,
"width":793,
"x":134,
"height":96}
,
"text":"So to declare an Integer (a whole number) might look like this:\u2028int firstVariable, secondVariable;"}
,{"targetRectangle":{"y":555,
"width":763,
"x":134,
"height":103}
,
"text":"Note that the type of variable will always come first, followed by the name. You may declare additional variables of the same type by separating their names with commas"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s4.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s4.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s4.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s4.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":664,
"x":180,
"height":96}
,
"text":"Variable Identifiers"}
,{"targetRectangle":{"y":236,
"width":786,
"x":134,
"height":83}
,
"text":"Variable identifiers are the names given to your variables. Some limitations are placed on what names are allowed as well as some best practices"}
,{"targetRectangle":{"y":318,
"width":765,
"x":134,
"height":111}
,
"text":"Identifiers may only contain alphanumeric characters (a-z, A-Z, 0-9) and the underscore ‘_’ symbol. Java also supports the $ symbol but this is discouraged"}
,{"targetRectangle":{"y":428,
"width":786,
"x":134,
"height":139}
,
"text":"Identifiers should also have descriptive names according to how they are to be used. Avoid single character names that you might use in math such as x, y, & z. Java has no limitation on the length of the name so better choices might be ‘currentAmount’, ‘errorMessage’, or ‘toReturn’"}
,{"targetRectangle":{"y":566,
"width":757,
"x":134,
"height":85}
,
"text":"Note that each word in these variables are title case, sans the first word which is lower case. This is known as “camel case” and is a common variable naming convention"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s5.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s5.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s5.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s5.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":728,
"x":148,
"height":96}
,
"text":"Primitive Data Types"}
,{"targetRectangle":{"y":236,
"width":786,
"x":134,
"height":112}
,
"text":"There are a number of different data types that can be declared"}
,{"targetRectangle":{"y":347,
"width":782,
"x":134,
"height":151}
,
"text":"This lecture will cover what are known as the primitive types. These types are written in lowercase and are the most basic that variables can get in Java"}
,{"targetRectangle":{"y":497,
"width":779,
"x":134,
"height":153}
,
"text":"Each data type has its own formatting, storage requirement and size limitation. You will want to commit to memory the byte, int, double, char, and bool data types at the least since they are used often."}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s6.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s6.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s6.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s6.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":728,
"x":148,
"height":96}
,
"text":"Primitive Data Types"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s7.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s7.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s7.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s7.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":614,
"x":205,
"height":96}
,
"text":"Assigning Values"}
,{"targetRectangle":{"y":224,
"width":750,
"x":134,
"height":150}
,
"text":"To declare these you write their type name along with the variable name:\u2028double currency;\u2028int amount, currentCount;\u2028char prefix;\u2028bool outcome;"}
,{"targetRectangle":{"y":373,
"width":711,
"x":134,
"height":178}
,
"text":"You can then use them in your program after the declaration using an assignment operator to initialize the variables to a specific value:\u2028currentCount = 0;\u2028currency = 5.04;\u2028prefix = ‘Z’;\u2028outcome = false;"}
,{"targetRectangle":{"y":550,
"width":786,
"x":134,
"height":113}
,
"text":"Assignment operators always take this form with the variable on the left-hand side of an equals sign and the value being assigned to it on the right-hand side. As you’ll see this value doesn’t have to be simple, it may be the result of an expression or an entire section of code"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s8.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s8.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s8.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s8.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":614,
"x":205,
"height":96}
,
"text":"Assigning Values"}
,{"targetRectangle":{"y":223,
"width":786,
"x":134,
"height":158}
,
"text":"Keep in mind the different formats for initializing the variables. Integer types contain whole numbers, floating-point types (float & double) use decimal points, characters use single quotations and booleans use true/false"}
,{"targetRectangle":{"y":380,
"width":757,
"x":134,
"height":156}
,
"text":"Variables by definition vary, so they may be assigned as many times as you need in a program. For example, to increment a counting variable you might write:\u2028count = count + 1;"}
,{"targetRectangle":{"y":535,
"width":768,
"x":134,
"height":129}
,
"text":"This takes the current value of ‘count’, adds 1 to it, then stores the new value at the same location in memory. This arithmetic follows the same rules that you would expect including order of operations"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s9.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s9.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s9.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s9.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":716,
"x":154,
"height":96}
,
"text":"Order of Operations"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s10.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s10.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s10.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s10.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":716,
"x":154,
"height":96}
,
"text":"Order of Operations"}
,{"targetRectangle":{"y":236,
"width":792,
"x":134,
"height":145}
,
"text":"One symbol not mentioned in the previous slide is the modulus “%” operator. This symbol outputs the remainder of a division operation:\u2028int modResult = 15 % 8; //Produces 7\u2028int modResult = 25 % 8; //Produces 1"}
,{"targetRectangle":{"y":380,
"width":786,
"x":134,
"height":177}
,
"text":"The modulus operator is often overlooked when working with simple problems. For example, to determine if a number is odd or even, mod by 2:\u2028int isOdd = 3 % 2; //Produces 1 (true)\u2028int isOdd = 4 % 2; //Produces 0 (false)"}
,{"targetRectangle":{"y":556,
"width":765,
"x":134,
"height":94}
,
"text":"You should also remember the modulus if you encounter counting problems. An example of this is on the previous page where each odd row has been ‘striped’ with a background color"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s11.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s11.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s11.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s11.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":806,
"x":109,
"height":96}
,
"text":"Assignment Operators"}
,{"targetRectangle":{"y":222,
"width":786,
"x":134,
"height":88}
,
"text":"The = sign isn't the only assignment operator in Java. There are a few other operators that serve as shorthand for modifying a variable"}
,{"targetRectangle":{"y":309,
"width":299,
"x":134,
"height":60}
,
"text":"Var1 += 5 adds 5 to Var1"}
,{"targetRectangle":{"y":368,
"width":382,
"x":134,
"height":60}
,
"text":"Var1 -= 5 subtracts 5 from Var 1"}
,{"targetRectangle":{"y":427,
"width":630,
"x":134,
"height":59}
,
"text":"This also works for multiplication ( *= ) and division ( /= )"}
,{"targetRectangle":{"y":485,
"width":679,
"x":134,
"height":89}
,
"text":"Changing a value by 1 is very common in programming (i.e. counting). There are special operators for this as well"}
,{"targetRectangle":{"y":573,
"width":330,
"x":134,
"height":60}
,
"text":"Var1++ increments Var1 by 1"}
,{"targetRectangle":{"y":632,
"width":339,
"x":134,
"height":32}
,
"text":"Var1-- decrements Var1 by 1"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s12.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s12.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s12.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s12.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":676,
"x":174,
"height":96}
,
"text":"Operators to Avoid"}
,{"targetRectangle":{"y":225,
"width":765,
"x":134,
"height":203}
,
"text":"It is highly discouraged to use these increment/decrement operators in the middle of an expression as their behavior may be unintuitive:\u2028int count = 10;\u2028int result = 5 + count--; //Result = 15, count = 9\u2028int result = 5 + count++; //Result = 14, count = 10"}
,{"targetRectangle":{"y":427,
"width":777,
"x":134,
"height":173}
,
"text":"To make this worse, alternate operators are available that swap the order of execution in the expression:\u2028int count = 10;\u2028int result = 5 + --count; //Result = 14, count = 9\u2028int result2 = 5 + ++count; //Result = 15, count = 10"}
,{"targetRectangle":{"y":599,
"width":784,
"x":134,
"height":63}
,
"text":"It’s best to avoid these misleading operators altogether and use the increment/decrement operators only on their own lines."}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s13.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s13.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s13.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s13.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":808,
"x":108,
"height":96}
,
"text":"Approximate Numbers"}
,{"targetRectangle":{"y":229,
"width":736,
"x":134,
"height":122}
,
"text":"Floating point numbers deserve some additional attention. Because floating point numbers represent fractions they suffer from a  storage limitation"}
,{"targetRectangle":{"y":350,
"width":761,
"x":134,
"height":92}
,
"text":"For example, if a float was used to store the fraction 1/3, it would need to store the number 0.3333... with the 3 repeated to infinity"}
,{"targetRectangle":{"y":441,
"width":773,
"x":134,
"height":123}
,
"text":"Memory doesn't like infinity. The number would be stored as an approximation, getting as close as possible to the real value. This would end up being closer to 0.33333333333333000000000"}
,{"targetRectangle":{"y":563,
"width":786,
"x":134,
"height":94}
,
"text":"This problem affects all floating point numbers and often manifests itself when performing multiplication or division on one. To that end, never use floats or doubles when dealing with currency"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s14.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s14.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s14.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s14.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":646,
"x":189,
"height":96}
,
"text":"Named Constants"}
,{"targetRectangle":{"y":223,
"width":786,
"x":134,
"height":118}
,
"text":"There are times in a program where you need to store a value but want that value to never change. Variables wouldn't work well for this (since they vary). Java provides named constants to serve this need instead"}
,{"targetRectangle":{"y":340,
"width":781,
"x":134,
"height":115}
,
"text":"Using a constant is a class-level (static) variable, but with the keyword final added\u2028public static final int DEFAULT_VOLUME = 4;"}
,{"targetRectangle":{"y":454,
"width":784,
"x":134,
"height":119}
,
"text":"Since it is class-level and public, this constant is visible throughout the entire program. However, since it is final, it can not ever be modified again after declaring it which keeps it safe from outside influence"}
,{"targetRectangle":{"y":572,
"width":774,
"x":134,
"height":91}
,
"text":"It is also a good practice with constants to capitalize the entire identifier and separate spaces between words with underscores. This helps differentiate unchangeable constants from dynamic variables"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s15.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s15.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s15.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s15.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":470,
"x":277,
"height":96}
,
"text":"Type Casting"}
,{"targetRectangle":{"y":226,
"width":762,
"x":134,
"height":177}
,
"text":"To force a variable to change its type, you place the new type in parentheses before that variable's name:\u2028double exactMileage = 34.257;\u2028int estMileage = (int)exactMileage;"}
,{"targetRectangle":{"y":402,
"width":786,
"x":134,
"height":147}
,
"text":"Type casting is only needed when you are reducing the specificity of the variable, such as reducing a double to an int"}
,{"targetRectangle":{"y":548,
"width":721,
"x":134,
"height":112}
,
"text":"Note that when you cast a double to an integer the numbers after the decimal point are truncated, not rounded"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s16.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s16.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s16.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":486,
"x":269,
"height":96}
,
"text":"Implicit Casts"}
,{"targetRectangle":{"y":225,
"width":724,
"x":134,
"height":79}
,
"text":"int source = 6;\u2028double dest = source / 5; //Produces 1 rather than 1.2"}
,{"targetRectangle":{"y":303,
"width":714,
"x":134,
"height":83}
,
"text":"One thing you will run into is the behavior where division does *not* automatically cast when between two integers"}
,{"targetRectangle":{"y":385,
"width":772,
"x":134,
"height":111}
,
"text":"Because of this, even if you are storing the final result in a floating point variable you will still have to cast at least one of the two integers for them to divide properly"}
,{"targetRectangle":{"y":495,
"width":779,
"x":134,
"height":166}
,
"text":"You can do this by casting one of the variables or, if you are using a numeric literal, you can ensure that it is already a floating point value. You do this by using the floating-point format (use a decimal, even if it’s x.0):\u2028int source = 6;\u2028double dest = source / 5.0; //Produces 1.2\u2028dest = (double)source / 5; //Also produces 1.2"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s17.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s17.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s17.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":24,
"width":684,
"x":181,
"height":184}
,
"text":"Practice is the Best Teacher"}
,{"targetRectangle":{"y":222,
"width":762,
"x":134,
"height":134}
,
"text":"Take some time now to play with the different operators and with the compiler"}
,{"targetRectangle":{"y":355,
"width":696,
"x":134,
"height":135}
,
"text":"I’ll be here if you have any questions or if you’d like something demonstrated"}
,{"targetRectangle":{"y":489,
"width":458,
"x":134,
"height":88}
,
"text":"Some ideas to start you off:"}
,{"targetRectangle":{"y":576,
"width":728,
"x":164,
"height":88}
,
"text":"Converting fahrenheit to celsius\u2028double cel = (fah - 32.0) * 5 / 9;"}
]
}
]
,
"loopSlideshow":0,
"showMode":0,
"majorVersion":0,
"notes":{}
,
"creator":"Apple Keynote 5.3",
"author":"",
"comment":"",
"pageCount":17,
"scalefactor480":0.3310547,
"slideCount":17}
