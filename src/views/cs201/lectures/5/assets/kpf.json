{"slideHeight":768,
"filename":"5 - Conditional Statements, Evaluating Boolean Expressions",
"navigatorEvents":[{"eventName":"Slide 1",
"eventIndex":0}
,{"eventName":"Slide 2",
"eventIndex":1}
,{"eventName":"Slide 3",
"eventIndex":2}
,{"eventName":"Slide 4",
"eventIndex":3}
,{"eventName":"Slide 5",
"eventIndex":4}
,{"eventName":"Slide 6",
"eventIndex":5}
,{"eventName":"Slide 7",
"eventIndex":6}
,{"eventName":"Slide 8",
"eventIndex":7}
,{"eventName":"Slide 9",
"eventIndex":8}
,{"eventName":"Slide 10",
"eventIndex":9}
,{"eventName":"Slide 11",
"eventIndex":10}
,{"eventName":"Slide 12",
"eventIndex":11}
,{"eventName":"Slide 13",
"eventIndex":12}
,{"eventName":"Slide 14",
"eventIndex":13}
,{"eventName":"Slide 15",
"eventIndex":14}
,{"eventName":"Slide 16",
"eventIndex":15}
,{"eventName":"Slide 17",
"eventIndex":16}
,{"eventName":"Slide 18",
"eventIndex":17}
,{"eventName":"Slide 19",
"eventIndex":18}
,{"eventName":"Slide 20",
"eventIndex":19}
,{"eventName":"Slide 21",
"eventIndex":20}
,{"eventName":"Slide 22",
"eventIndex":21}
,{"eventName":"Slide 23",
"eventIndex":22}
,{"eventName":"Slide 24",
"eventIndex":23}
]
,
"textures":{"s15.b":{"url":"images-1/s15.b.jpeg",
"width":1024,
"height":768}
,
"s6.a":{"url":"images-1/s5.b.jpeg",
"width":1024,
"height":768}
,
"s12.a":{"url":"images-1/s11.b.jpeg",
"width":1024,
"height":768}
,
"s18.a":{"url":"images-1/s17.b.jpeg",
"width":1024,
"height":768}
,
"s2.b":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"s22.b":{"url":"images-1/s22.b.jpeg",
"width":1024,
"height":768}
,
"thumbnail":{"url":"images-1/thumbnail.jpeg",
"width":458,
"height":344}
,
"s8.a":{"url":"images-1/s7.b.jpeg",
"width":1024,
"height":768}
,
"s4.b":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s14.b":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s17.a":{"url":"images-1/s16.b.jpeg",
"width":1024,
"height":768}
,
"s11.a":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s21.b":{"url":"images-1/s21.b.jpeg",
"width":1024,
"height":768}
,
"s6.b":{"url":"images-1/s6.b.jpeg",
"width":1024,
"height":768}
,
"s1.a":{"url":"images-1/s1.a.jpeg",
"width":1024,
"height":768}
,
"s24.a":{"url":"images-1/s23.b.jpeg",
"width":1024,
"height":768}
,
"s19.b":{"url":"images-1/s19.b.jpeg",
"width":1024,
"height":768}
,
"s13.b":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s8.b":{"url":"images-1/s8.b.jpeg",
"width":1024,
"height":768}
,
"s10.a":{"url":"images-1/s9.b.jpeg",
"width":1024,
"height":768}
,
"s3.a":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"s16.a":{"url":"images-1/s15.b.jpeg",
"width":1024,
"height":768}
,
"s20.b":{"url":"images-1/s20.b.jpeg",
"width":1024,
"height":768}
,
"s23.a":{"url":"images-1/s22.b.jpeg",
"width":1024,
"height":768}
,
"s5.a":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s18.b":{"url":"images-1/s18.b.jpeg",
"width":1024,
"height":768}
,
"s12.b":{"url":"images-1/s12.b.jpeg",
"width":1024,
"height":768}
,
"s1.b":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s15.a":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s7.a":{"url":"images-1/s6.b.jpeg",
"width":1024,
"height":768}
,
"s22.a":{"url":"images-1/s21.b.jpeg",
"width":1024,
"height":768}
,
"s3.b":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s17.b":{"url":"images-1/s17.b.jpeg",
"width":1024,
"height":768}
,
"s11.b":{"url":"images-1/s11.b.jpeg",
"width":1024,
"height":768}
,
"s9.a":{"url":"images-1/s8.b.jpeg",
"width":1024,
"height":768}
,
"s14.a":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s5.b":{"url":"images-1/s5.b.jpeg",
"width":1024,
"height":768}
,
"s24.b":{"url":"images-1/s24.b.png",
"width":1024,
"height":768}
,
"s21.a":{"url":"images-1/s20.b.jpeg",
"width":1024,
"height":768}
,
"s7.b":{"url":"images-1/s7.b.jpeg",
"width":1024,
"height":768}
,
"s2.a":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s10.b":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s16.b":{"url":"images-1/s16.b.jpeg",
"width":1024,
"height":768}
,
"s13.a":{"url":"images-1/s12.b.jpeg",
"width":1024,
"height":768}
,
"s19.a":{"url":"images-1/s18.b.jpeg",
"width":1024,
"height":768}
,
"s23.b":{"url":"images-1/s23.b.jpeg",
"width":1024,
"height":768}
,
"s9.b":{"url":"images-1/s9.b.jpeg",
"width":1024,
"height":768}
,
"s4.a":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s20.a":{"url":"images-1/s19.b.jpeg",
"width":1024,
"height":768}
}
,
"title":"5 - Conditional Statements, Evaluating Boolean Expressions",
"minorVersion":4,
"timestamp":"2013-01-29 01:13:19",
"slideWidth":1024,
"eventTimelines":[{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s1.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s1.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s1.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s1.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":133,
"width":768,
"x":138,
"height":252}
,
"text":"Conditional Statements, Evaluating Boolean Expressions"}
,{"targetRectangle":{"y":400,
"width":164,
"x":430,
"height":38}
,
"text":"Ryan Nixon"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s2.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s2.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s2.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s2.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":748,
"x":138,
"height":96}
,
"text":"Decisions, Decisions"}
,{"targetRectangle":{"y":245,
"width":786,
"x":134,
"height":157}
,
"text":"Most if not all programs are going to need to change what they do according to conditions in the program. This is known as branching, or flow control."}
,{"targetRectangle":{"y":401,
"width":784,
"x":134,
"height":161}
,
"text":"There are a few constructs in Java to help with these decisions, namely if-else statements, switch statements, while loops and for loops"}
,{"targetRectangle":{"y":561,
"width":755,
"x":134,
"height":81}
,
"text":"We're going to cover the statements today and the loops at a later date"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s3.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s3.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s3.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s3.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":24,
"width":769,
"x":138,
"height":184}
,
"text":"Branching with If-Else Statements"}
,{"targetRectangle":{"y":226,
"width":773,
"x":134,
"height":109}
,
"text":"The if-else statement is comprised of two keywords, if & else."}
,{"targetRectangle":{"y":334,
"width":758,
"x":134,
"height":108}
,
"text":"if declares that some action be performed if a Boolean expression resolves to true"}
,{"targetRectangle":{"y":441,
"width":786,
"x":134,
"height":109}
,
"text":"else is optional and declares that an action be performed if the if statement preceding it resolves to false"}
,{"targetRectangle":{"y":549,
"width":761,
"x":134,
"height":112}
,
"text":"In this way, you are able to use if statements alone, but else statements require that an if statement be written first"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s4.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s4.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s4.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s4.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":24,
"width":769,
"x":138,
"height":184}
,
"text":"Branching with If-Else Statements"}
,{"targetRectangle":{"y":235,
"width":323,
"x":134,
"height":170}
,
"text":"if (condition is true) {\u2028\taction;\u2028}\u2028else {\u2028\totherAction;\u2028}"}
,{"targetRectangle":{"y":404,
"width":746,
"x":134,
"height":174}
,
"text":"As with classes and methods, if-else statements use braces to define the actions relating to them (their scope). These braces are only required if more than one action occurs, although it is recommended to always use them"}
,{"targetRectangle":{"y":577,
"width":786,
"x":134,
"height":74}
,
"text":"In the example above, action will only be performed if condition is true, otherwise otherAction will be performed"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s5.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s5.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s5.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s5.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":24,
"width":769,
"x":138,
"height":184}
,
"text":"Branching with If-Else Statements"}
,{"targetRectangle":{"y":223,
"width":338,
"x":134,
"height":190}
,
"text":"if (temperature < 32) {\u2028\tstate = \"Freezing\";\u2028}\u2028else {\u2028\tstate = \"Toasty\";\u2028}"}
,{"targetRectangle":{"y":412,
"width":742,
"x":134,
"height":143}
,
"text":"It's very easily to think of situations where one thing or another may be done according to conditions. Above, weather conditions may play a part"}
,{"targetRectangle":{"y":554,
"width":750,
"x":134,
"height":109}
,
"text":"The above example reads, \"If the temperature is below 32, then the state is freezing. Otherwise the state is toasty.\""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s6.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s6.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s6.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s6.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":24,
"width":769,
"x":138,
"height":184}
,
"text":"Branching with If-Else Statements"}
,{"targetRectangle":{"y":242,
"width":758,
"x":134,
"height":118}
,
"text":"In the weather example the < means \"less-than\" like you would see in a mathematical equation"}
,{"targetRectangle":{"y":359,
"width":786,
"x":134,
"height":121}
,
"text":"There is also > \"greater-than\", >= \"greater-than or equal\" (just like ≥ in math), and <= \"less-than or equal\""}
,{"targetRectangle":{"y":479,
"width":786,
"x":134,
"height":165}
,
"text":"Lastly you use == and != for equals and not equals, respectively. You should not use a single =, that is the assignment operator and would assign a new value to whatever is on the left side of the expression"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s7.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s7.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s7.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s7.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":792,
"x":116,
"height":96}
,
"text":"Boolean Comparisons"}
,{"targetRectangle":{"y":226,
"width":751,
"x":134,
"height":92}
,
"text":"Boolean expressions, just like the data type of the same name, are always true or false"}
,{"targetRectangle":{"y":317,
"width":762,
"x":134,
"height":125}
,
"text":"Using Boolean operators (>, <, >=, etc.) we can define complex conditions that boil down to this simple 1/0 yes/no true/false relationship"}
,{"targetRectangle":{"y":441,
"width":786,
"x":134,
"height":126}
,
"text":"You can also chain multiple Boolean expressions together with && \"and\" as well as || \"or\". The ! \"not\" operator can also manipulate the result, turning a true to a false"}
,{"targetRectangle":{"y":566,
"width":759,
"x":134,
"height":94}
,
"text":"These expressions follow a similar order of operation to math, allowing us to use parentheses to define which expressions are resolved first"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s8.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s8.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s8.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s8.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":792,
"x":116,
"height":96}
,
"text":"Boolean Comparisons"}
,{"targetRectangle":{"y":287,
"width":786,
"x":134,
"height":231}
,
"text":"&& specifies that the expression to the left and the expression to the right must be true for it to return true. If either are false then && will resolve to false"}
,{"targetRectangle":{"y":517,
"width":656,
"x":134,
"height":83}
,
"text":"if(bet == 42 && winner == 42)\u2028\tbetAgain();"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s9.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s9.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s9.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s9.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":792,
"x":116,
"height":96}
,
"text":"Boolean Comparisons"}
,{"targetRectangle":{"y":242,
"width":776,
"x":134,
"height":321}
,
"text":"|| (double pipes) specifies that either the expression to the left or the expression to the right may be true for it to return true. This means that if both are true it will also resolve to true, but if both are false then it will resolve to false"}
,{"targetRectangle":{"y":562,
"width":764,
"x":134,
"height":83}
,
"text":"if(RED == BLACK || YELLOW == GRAY)\u2028\tseeTheOptometrist();"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s10.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s10.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s10.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s10.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":792,
"x":116,
"height":96}
,
"text":"Boolean Comparisons"}
,{"targetRectangle":{"y":223,
"width":724,
"x":134,
"height":148}
,
"text":"! takes whatever expression is to the right of it and reverses its value. True becomes false and false becomes true"}
,{"targetRectangle":{"y":370,
"width":761,
"x":134,
"height":104}
,
"text":"if(!(proximity > 30) && !(workingBrakes))\u2028\tconsiderPanicking();"}
,{"targetRectangle":{"y":473,
"width":779,
"x":134,
"height":191}
,
"text":"Note that the above condition could also be (proximity <= 30) which would equate to the same value. ! is more commonly used in variables than expressions since it is easier and more readable to write the statement without the !."}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s11.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s11.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s11.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s11.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":24,
"width":488,
"x":279,
"height":184}
,
"text":"Booleans in If Statements"}
,{"targetRectangle":{"y":218,
"width":0,
"x":100,
"height":0}
,
"text":""}
,{"targetRectangle":{"y":286,
"width":786,
"x":134,
"height":112}
,
"text":"When starting out with if statements, it's best to look at them from the inside out. Start with the parentheses, then the boolean operators, then the chains (||, &&, etc.) and work your way through to the outer parentheses, if any."}
,{"targetRectangle":{"y":397,
"width":485,
"x":134,
"height":142}
,
"text":"if((17 < 34 || 12 == 8) && 42 >= 41.5)\u2028if((true    || false  ) && 42 >= 41.5)\u2028if((true              ) && 42 >= 41.5)\u2028if(true                 && true)\u2028if(true) //Perform action"}
,{"targetRectangle":{"y":538,
"width":363,
"x":134,
"height":116}
,
"text":"if(‘H’ > ‘I’ || !(81 < 100))\u2028if(‘H’ > ‘I’ || !(true    ))\u2028if(‘H’ > ‘I‘ ||  (false   ))\u2028if(false     ||  (false   ))\u2028if(false) //Skip action"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s12.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s12.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s12.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s12.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":650,
"x":187,
"height":96}
,
"text":"Nested Branching"}
,{"targetRectangle":{"y":225,
"width":776,
"x":134,
"height":147}
,
"text":"Because if-else statements allow multiple actions to take place within their braces (scope) there is nothing stopping a programmer from placing an if-else statement within another. This is known as nested branching, or nested if statements"}
,{"targetRectangle":{"y":371,
"width":306,
"x":134,
"height":291}
,
"text":"if(halfACondition) {\u2028\tif(otherHalf) {\u2028\t\taction;\u2028\t}\u2028\telse {\u2028\t\thalfAFailure;\u2028\t}\u2028}\u2028else {\u2028\tutterFailure;\u2028}"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s13.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s13.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s13.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s13.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":650,
"x":187,
"height":96}
,
"text":"Nested Branching"}
,{"targetRectangle":{"y":222,
"width":771,
"x":134,
"height":73}
,
"text":"Nested branching can get out of hand if overused. It is best to keep your nesting to a minimum"}
,{"targetRectangle":{"y":294,
"width":786,
"x":134,
"height":99}
,
"text":"You can use the Boolean chaining operators and \"else if\" to do this. Think of \"else if\" as just an else with an if statement in it; it allows you to check for a secondary condition if the first one fails"}
,{"targetRectangle":{"y":392,
"width":397,
"x":134,
"height":221}
,
"text":"if(halfACondition && otherHalf) {\u2028\taction;\u2028}\u2028else if(halfACondition) {\u2028\thalfAFailure;\u2028}\u2028else {\u2028\tutterFailure;\u2028}"}
,{"targetRectangle":{"y":612,
"width":786,
"x":134,
"height":52}
,
"text":"You may use as many else if's as you like, provided that you do not use an else (which resolves to all remaining possible conditions)"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s14.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s14.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s14.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s14.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":552,
"x":236,
"height":96}
,
"text":"Boolean Values"}
,{"targetRectangle":{"y":226,
"width":781,
"x":134,
"height":179}
,
"text":"Remember the Boolean data type? It can be used in all of these prior examples. If you set the value of the variable to the result of a Boolean expression it can be used to represent that expression in if-else statements:"}
,{"targetRectangle":{"y":404,
"width":749,
"x":134,
"height":220}
,
"text":"bool gasLight = (tankState < 1.0);\u2028bool oilChange = (now < (lastChange + 90));\u2028if(gasLight) {\u2028\tilluminateGasWarning();\u2028else if (!oilChange) {\u2028\tbreatheEasy();"}
,{"targetRectangle":{"y":623,
"width":446,
"x":134,
"height":38}
,
"text":"Note the use of the ! not operator"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s15.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s15.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s15.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s15.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":658,
"x":183,
"height":96}
,
"text":"Switch Statements"}
,{"targetRectangle":{"y":260,
"width":782,
"x":134,
"height":229}
,
"text":"If you are only checking for equality against one variable and you end up with a lot of else ifs, a switch statement may help organize your code better"}
,{"targetRectangle":{"y":488,
"width":776,
"x":134,
"height":139}
,
"text":"Switches do not add any new functionality, they just provide a different way of branching your code"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s16.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s16.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s16.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":658,
"x":183,
"height":96}
,
"text":"Switch Statements"}
,{"targetRectangle":{"y":238,
"width":418,
"x":134,
"height":410}
,
"text":"switch(variable) {\u2028\tcase 'A':\u2028\t\tactionA;\u2028\t\tbreak;\u2028\tcase 'B':\u2028\t\tactionB;\u2028\t\tbreak;\u2028\tdefault:\u2028\t\tactionElse;\u2028}"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s17.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s17.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s17.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":658,
"x":183,
"height":96}
,
"text":"Switch Statements"}
,{"targetRectangle":{"y":223,
"width":779,
"x":134,
"height":93}
,
"text":"Note the keywords switch, case, break & default and the use of colons."}
,{"targetRectangle":{"y":315,
"width":786,
"x":134,
"height":127}
,
"text":"With a switch you run \"cases\" against a single variable, checking for equality. In Java these cases must be literals such as \"String\" or 5."}
,{"targetRectangle":{"y":441,
"width":760,
"x":134,
"height":158}
,
"text":"If a case matches then the code under it is run until the break; command is reached. Note that it will continue regardless of it passing other case statements. This allows one match to \"fall through\" to another (just like an || would)"}
,{"targetRectangle":{"y":598,
"width":748,
"x":134,
"height":65}
,
"text":"Default acts like the else statement, executing if none of the cases match"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s18.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s18.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s18.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s18.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":704,
"x":160,
"height":96}
,
"text":"Comparing Objects"}
,{"targetRectangle":{"y":240,
"width":786,
"x":134,
"height":160}
,
"text":"Hopefully conditionals and branching should seem relatively intuitive so far. Unfortunately Java throws a a wrench in the works with objects"}
,{"targetRectangle":{"y":399,
"width":779,
"x":134,
"height":122}
,
"text":"As mentioned previously, objects such as String are often treated differently than primitive data types"}
,{"targetRectangle":{"y":520,
"width":781,
"x":134,
"height":126}
,
"text":"Branching statements are one of the biggest offenders of this. You cannot perform if statements on objects to compare their values "}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s19.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s19.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s19.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s19.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s19.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s19.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":704,
"x":160,
"height":96}
,
"text":"Comparing Objects"}
,{"targetRectangle":{"y":230,
"width":462,
"x":134,
"height":80}
,
"text":"if(object1 == object2)"}
,{"targetRectangle":{"y":309,
"width":786,
"x":134,
"height":214}
,
"text":"This statement compares the memory locations of the two objects. It will only return true if they are in fact the same object (albeit with a different name)"}
,{"targetRectangle":{"y":522,
"width":780,
"x":134,
"height":134}
,
"text":"This same behavior applies to the >, <, >= and <= operators. It's best to just avoid using these on objects"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s20.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s20.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s20.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s20.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s20.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s20.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":556,
"x":234,
"height":96}
,
"text":".equals(Object)"}
,{"targetRectangle":{"y":222,
"width":514,
"x":134,
"height":73}
,
"text":"if(object1.equals(object2))"}
,{"targetRectangle":{"y":294,
"width":786,
"x":134,
"height":245}
,
"text":"Instead, all objects in Java have a .equals() method. Programmers who create these objects can then define what \"equals\" means to them and return a more helpful Boolean value representing the state of the object"}
,{"targetRectangle":{"y":538,
"width":699,
"x":134,
"height":126}
,
"text":"Note that .equals() must be defined by the specific object, otherwise Java will fall back to memory location comparisons"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s21.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s21.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s21.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s21.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":716,
"x":154,
"height":96}
,
"text":".compareTo(Object)"}
,{"targetRectangle":{"y":226,
"width":560,
"x":134,
"height":59}
,
"text":"int cmp = object1.compareTo(object2);"}
,{"targetRectangle":{"y":284,
"width":782,
"x":134,
"height":187}
,
"text":"Some but not all objects are Comparable, which means that they have a .compareTo() method. This method is like .equals() but instead of returning true or false it returns an integer. This integer can then be inspected for the relative value of the passed in object against the source (the owning object for the method)"}
,{"targetRectangle":{"y":470,
"width":748,
"x":134,
"height":127}
,
"text":"If the int is 0 then the two objects are \"equal\" (like .equals())\u2028If the int is > 0 then object1 is greater than object2\u2028If the int is < 0 then object1 is less than object2"}
,{"targetRectangle":{"y":596,
"width":641,
"x":134,
"height":65}
,
"text":"compareTo() like .equals() is completely up to the programmer to define, so be wary when using it"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s22.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s22.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s22.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s22.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":764,
"x":130,
"height":96}
,
"text":"The Ternary Operator"}
,{"targetRectangle":{"y":261,
"width":774,
"x":134,
"height":272}
,
"text":"An unappreciated addition to the other flow control statements is the ternary operator, or conditional operator. This operator has a less intuitive syntax but is very useful in some situations"}
,{"targetRectangle":{"y":533,
"width":725,
"x":134,
"height":92}
,
"text":"Ternary operators allow very simple if-else statements to be reduced to a single line"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s23.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s23.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s23.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s23.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":68,
"width":764,
"x":130,
"height":96}
,
"text":"The Ternary Operator"}
,{"targetRectangle":{"y":235,
"width":783,
"x":134,
"height":70}
,
"text":"string variable = (condition) ? “true” : “false”;"}
,{"targetRectangle":{"y":304,
"width":786,
"x":134,
"height":215}
,
"text":"In the above example, the variable is assigned the string “true” if the boolean condition equates to true, otherwise it is assigned false. It’s best to think of the ? as the if and the : as the else"}
,{"targetRectangle":{"y":518,
"width":764,
"x":134,
"height":134}
,
"text":"Note that in ternaries both the if and the else are required, so the : and the following value must be provided for the statement to compile"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s24.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s24.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s24.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":289,
"width":402,
"x":311,
"height":96}
,
"text":"Questions?"}
,{"targetRectangle":{"y":400,
"width":278,
"x":373,
"height":38}
,
"text":"Double-click to edit"}
]
}
]
,
"loopSlideshow":0,
"showMode":0,
"majorVersion":0,
"notes":{}
,
"creator":"Apple Keynote 5.3",
"author":"",
"comment":"",
"pageCount":24,
"scalefactor480":0.3310547,
"slideCount":24}
